# Source: https://github.com/aws-samples/aws-aurora-serverless-data-api-sam/blob/master/deploy_scripts/\
# Cf.
# https://aws.amazon.com/blogs/database/using-the-data-api-to-interact-with-an-amazon-aurora-serverless-mysql-database/
# https://forums.aws.amazon.com/thread.jspa?messageID=917537
# "It uses MySQL but the only attributes you need to change
# to have a PostgreSQL database instead are: Engine, EngineVersion, MaxCapacity and MinCapacity."

# This was file for RDS database:

# John's notes -- we need to try this with

AWSTemplateFormatVersion: '2010-09-09'
Description: Provisions Aurora Serverless and related resources for the Simple EC2 Inventory sample solution on AWS
Parameters:
  AppName:
    Description: "Application Name"
    Type: String
    Default: ec2-inv
  EnvType:
    Description: "Environment type (eg, dev, qa, prod)"
    Type: String
    Default: dev
  DBClusterName:
    Description: "Aurora RDS cluster name"
    Type: String
    Default: ec2-inv-rds-cluster
  DatabaseName:
    Description: "Aurora RDS database name"
    Type: String
    Default: ec2_inventory_db
  DBMasterUserName:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: admin_user
  DBSubnetList:
    Description: "List of subnets for the Aurora RDS cluster"
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: "must be a list of at least three existing subnets associated with at least three different availability zones."
Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Select [0, !Ref DBSubnetList ]
        - !Select [1, !Ref DBSubnetList ]
        - !Select [2, !Ref DBSubnetList ]
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${EnvType}-AuroraUserSecret"
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUserName}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppName
          Value: !Ref AppName
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DatabaseName: !Ref DatabaseName
      Engine: aurora
      EngineMode: serverless
      EngineVersion: 5.6.10a
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 4
        MinCapacity: 1
        SecondsUntilAutoPause: 900 # 15 min
      DBSubnetGroupName:
        Ref: DBSubnetGroup
Outputs:
  StackName:
    Description: Aurora Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-StackName

  DatabaseName:
    Description: Aurora Database Name
    Value: !Ref DatabaseName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseName

  DatabaseClusterArn:
    Description: Aurora Cluster ARN
    Value: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterArn

  DatabaseSecretArn:
    Description: Aurora Secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecretArn

  DatabaseClusterID:
    Description: Aurora Cluster ID
    Value: !Ref RDSCluster
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterID

  AuroraDbURL:
    Description: Aurora Database URL
    Value: !GetAtt RDSCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseURL

  DatabaseMasterUserName:
    Description: Aurora Database User
    Value: !Ref DBMasterUserName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseMasterUserName


# This was one file -- for application
AWSTemplateFormatVersion: '2010-09-09'
Description: Provisions AWS Serverless API resourcs for the Simple EC2 Inventory sample solution on AWS
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  AppName:
    Description: "Application Name"
    Type: String
    Default: simple-ec2-inventory
  EnvType:
    Description: "Environment type (eg, dev, qa, prod)"
    Type: String
    Default: dev
  DatabaseStackName:
    Description: "Name of the RDS CloudFormation stack to import parameters from"
    Type: String
    Default: ec2_inventory_db
  EC2TableName:
    Description: "EC2 Table name"
    Type: String
    Default: ec2
  PackageTableName:
    Description: "Package Table name"
    Type: String
    Default: package
  EC2PackageTableName:
    Description: "EC2-Package Table name"
    Type: String
    Default: ec2_package
  ApiStageName:
    Description: "API Stage Name"
    Type: String
    Default: dev
  LambdaLogLevel:
    Description: "Log verbosity level for Lambda functions"
    Type: String
    Default: info
Globals:
  Function:
    Runtime: python3.6
    Timeout: 120
    MemorySize: 256
    AutoPublishAlias: live
    Environment:
      Variables:
        LOG_LEVEL: !Ref LambdaLogLevel
        EC2_TABLE_NAME: !Ref EC2TableName
        PACKAGE_TABLE_NAME: !Ref PackageTableName
        EC2_PACKAGE_RPM_TABLE_NAME: !Ref EC2PackageTableName
        DB_NAME:
          Fn::ImportValue:
            !Sub "${DatabaseStackName}-DatabaseName"
        DB_CLUSTER_ARN:
          Fn::ImportValue:
              !Sub "${DatabaseStackName}-DatabaseClusterArn"
        DB_CRED_SECRETS_STORE_ARN:
          Fn::ImportValue:
              !Sub "${DatabaseStackName}-DatabaseSecretArn"
  Api:
    Name: !Sub "${EnvType}-${AppName}-api"
    EndpointConfiguration: REGIONAL
Resources:
  EC2InventoryAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
        StageName: !Sub "${ApiStageName}"
        TracingEnabled: True
  AddEC2InfoLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Adds EC2 info to the inventory
      FunctionName: !Sub "${EnvType}-${AppName}-add-ec2-lambda"
      CodeUri: ../lambdas/
      Handler: add_ec2_info.handler
      Tracing: Active
      Events:
        EC2PostEvent:
          Type: Api
          Properties:
            Path: '/ec2/{aws_instance_id}'
            Method: post
            RestApiId: !Ref EC2InventoryAPI
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - rds-data:*
              Resource:
                Fn::ImportValue:
                  !Sub "${DatabaseStackName}-DatabaseClusterArn"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                Fn::ImportValue:
                  !Sub "${DatabaseStackName}-DatabaseSecretArn"
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: "*"
  GetEC2InfoLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Retrieves EC2 info from the inventory
      FunctionName: !Sub "${EnvType}-${AppName}-get-ec2-lambda"
      CodeUri: ../lambdas/
      Handler: get_ec2_info.handler
      Tracing: Active
      Events:
        EC2GetEvent:
          Type: Api
          Properties:
            Path: '/ec2/{aws_instance_id}'
            Method: get
            RestApiId: !Ref EC2InventoryAPI
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - rds-data:*
              Resource:
                Fn::ImportValue:
                  !Sub "${DatabaseStackName}-DatabaseClusterArn"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                Fn::ImportValue:
                  !Sub "${DatabaseStackName}-DatabaseSecretArn"
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: "*"
Outputs:
  StackName:
    Description: API Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-StackName

  ApiEndpoint:
    Description: API Stage Endpoint
    Value: !Sub "https://${EC2InventoryAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}"
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndPoint